bowtie2-build /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.fasta /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.1.bt2
Wrote 632 bytes to secondary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Listeria/Listeria_gcds_combined.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2016-SEQ-0643/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2350 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2350 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2351 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 592 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2350 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2350 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2351 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 592 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2350 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2350 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2351 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 592 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2350 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2350 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2351 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 592 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01

------------------------------------------------------------bowtie2-build /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 334.857 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (441) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 327 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 328 for bucket 1
Getting block 2 of 7
  Reserving size (441) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 248 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 249 for bucket 2
Getting block 3 of 7
  Reserving size (441) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 366 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 367 for bucket 3
Getting block 4 of 7
  Reserving size (441) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 375 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 376 for bucket 4
Getting block 5 of 7
  Reserving size (441) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 376 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 377 for bucket 5
Getting block 6 of 7
  Reserving size (441) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 363 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 364 for bucket 6
Getting block 7 of 7
  Reserving size (441) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 289 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 290 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 592 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 587
Using parameters --bmax 441 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 441 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 334.857 (target: 440)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (441) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 409 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 410 for bucket 1
Getting block 2 of 7
  Reserving size (441) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 434 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 435 for bucket 2
Getting block 3 of 7
  Reserving size (441) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 390 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 391 for bucket 3
Getting block 4 of 7
  Reserving size (441) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 92 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 93 for bucket 4
Getting block 5 of 7
  Reserving size (441) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 421 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 422 for bucket 5
Getting block 6 of 7
  Reserving size (441) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 302 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 303 for bucket 6
Getting block 7 of 7
  Reserving size (441) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 296 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 297 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 806
fchr[G]: 1254
fchr[T]: 1763
fchr[$]: 2350
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196550 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 592 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2350
    bwtLen: 2351
    sz: 588
    bwtSz: 588
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 147
    offsSz: 588
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 305.375 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (459) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 320 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 321 for bucket 1
Getting block 2 of 8
  Reserving size (459) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 358 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 359 for bucket 2
Getting block 3 of 8
  Reserving size (459) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 380 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 381 for bucket 3
Getting block 4 of 8
  Reserving size (459) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 83 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 84 for bucket 4
Getting block 5 of 8
  Reserving size (459) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 401 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 402 for bucket 5
Getting block 6 of 8
  Reserving size (459) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 229 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 230 for bucket 6
Getting block 7 of 8
  Reserving size (459) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 301 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 302 for bucket 7
Getting block 8 of 8
  Reserving size (459) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 371 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 372 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 407.5 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (459) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 394 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 395 for bucket 1
Getting block 2 of 6
  Reserving size (459) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 458 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 459 for bucket 2
Getting block 3 of 6
  Reserving size (459) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 395 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 396 for bucket 3
Getting block 4 of 6
  Reserving size (459) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 372 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 373 for bucket 4
Getting block 5 of 6
  Reserving size (459) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 402 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 403 for bucket 5
Getting block 6 of 6
  Reserving size (459) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 424 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 425 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 305.375 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (459) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 320 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 321 for bucket 1
Getting block 2 of 8
  Reserving size (459) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 358 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 359 for bucket 2
Getting block 3 of 8
  Reserving size (459) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 380 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 381 for bucket 3
Getting block 4 of 8
  Reserving size (459) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 83 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 84 for bucket 4
Getting block 5 of 8
  Reserving size (459) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 401 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 402 for bucket 5
Getting block 6 of 8
  Reserving size (459) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 229 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 230 for bucket 6
Getting block 7 of 8
  Reserving size (459) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 301 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 302 for bucket 7
Getting block 8 of 8
  Reserving size (459) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 371 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 372 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 407.5 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 6
  Reserving size (459) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 394 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 395 for bucket 1
Getting block 2 of 6
  Reserving size (459) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 458 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 459 for bucket 2
Getting block 3 of 6
  Reserving size (459) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 395 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 396 for bucket 3
Getting block 4 of 6
  Reserving size (459) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 372 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 373 for bucket 4
Getting block 5 of 6
  Reserving size (459) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 402 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 403 for bucket 5
Getting block 6 of 6
  Reserving size (459) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 424 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 425 for bucket 6
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 139 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 140 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 329 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 330 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 444 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 445 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 170 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 171 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 446 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 467 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 173 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 174 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 326 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 327 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 311.625 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (469) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 386 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 387 for bucket 1
Getting block 2 of 8
  Reserving size (469) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 153 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 154 for bucket 2
Getting block 3 of 8
  Reserving size (469) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 338 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 339 for bucket 3
Getting block 4 of 8
  Reserving size (469) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 467 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 468 for bucket 4
Getting block 5 of 8
  Reserving size (469) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 280 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 5
Getting block 6 of 8
  Reserving size (469) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 378 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 379 for bucket 6
Getting block 7 of 8
  Reserving size (469) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 211 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 212 for bucket 7
Getting block 8 of 8
  Reserving size (469) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 280 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 281 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0937/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0825/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0826/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0827/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 612
Using parameters --bmax 459 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 459 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2450 (target: 458)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2450 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2451 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 839
fchr[G]: 1302
fchr[T]: 1835
fchr[$]: 2450
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196604 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 620 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0828/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2450
    bwtLen: 2451
    sz: 613
    bwtSz: 613
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 154
    offsSz: 616
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 13
    numLines: 13
    ebwtTotLen: 832
    ebwtTotSz: 832
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0835/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 625
Using parameters --bmax 469 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 469 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2500 (target: 468)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2500 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2501 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 861
fchr[G]: 1330
fchr[T]: 1876
fchr[$]: 2500
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196695 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 632 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0837/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2500
    bwtLen: 2501
    sz: 625
    bwtSz: 626
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 157
    offsSz: 628
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------