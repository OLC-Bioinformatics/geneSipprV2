bowtie2-build /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.fasta /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.1.bt2
Wrote 668 bytes to secondary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /nas0/bio_requests/8312/validation/targets/GDCS/Escherichia/Escherichia_gcds_combined.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/assembly/2014-SEQ-0276/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/50_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 329.375 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 60 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 61 for bucket 1
Getting block 2 of 8
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 440 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 441 for bucket 2
Getting block 3 of 8
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 452 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 453 for bucket 3
Getting block 4 of 8
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 368 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 369 for bucket 4
Getting block 5 of 8
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 273 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 274 for bucket 5
Getting block 6 of 8
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 226 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 227 for bucket 6
Getting block 7 of 8
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 419 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 420 for bucket 7
Getting block 8 of 8
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 397 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 398 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 292.667 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (495) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 162 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 163 for bucket 1
Getting block 2 of 9
  Reserving size (495) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 396 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 397 for bucket 2
Getting block 3 of 9
  Reserving size (495) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 220 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 221 for bucket 3
Getting block 4 of 9
  Reserving size (495) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 446 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 447 for bucket 4
Getting block 5 of 9
  Reserving size (495) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 281 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 282 for bucket 5
Getting block 6 of 9
  Reserving size (495) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 215 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 216 for bucket 6
Getting block 7 of 9
  Reserving size (495) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 291 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 292 for bucket 7
Getting block 8 of 9
  Reserving size (495) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 331 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 332 for bucket 8
Getting block 9 of 9
  Reserving size (495) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 292 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 293 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /sippr/sequences/full_full/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/sero/sequences/2017-SEQ-0935/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:01

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0838/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/unittest/sequences/NC_002695/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/Bioinformatics/sippr/method/sequences/full_0/2016-SEQ-0836/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:01
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------bowtie2-build /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
------------------------------------------------------------Building a SMALL index

------------------------------------------------------------Settings:
  Output files: "/home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 660
Using parameters --bmax 495 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 495 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2642 (target: 494)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 1
  No samples; assembling all-inclusive block
  Sorting block of length 2642 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 2643 for bucket 1
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 738
fchr[G]: 1367
fchr[T]: 2034
fchr[$]: 2642
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4196776 bytes to primary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.1.bt2
Wrote 668 bytes to secondary EBWT file: /home/adamkoziol/PycharmProjects/geneSipprV2/sipprverse/tests/testdata/sequences/GDCS/GDCS/baitedtargets.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 2642
    bwtLen: 2643
    sz: 661
    bwtSz: 661
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 166
    offsSz: 664
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 14
    numLines: 14
    ebwtTotLen: 896
    ebwtTotSz: 896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:00

------------------------------------------------------------